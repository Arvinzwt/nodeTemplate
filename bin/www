#!/usr/bin/env node

/**
 * 导入依赖模块
 */

var app = require('../app');
var debug = require('debug')('nodetemplate:server');
var http = require('http');

/**
 * 从环境获取端口并存储在Express中。
 */

var port = normalizePort(process.env.PORT || '3332');
app.set('port', port);

/**
 * 创建HTTP服务器。
 */

var server = http.createServer(app);

/**
 * 在所有网络接口上侦听提供的端口。
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 将端口标准化为数字，字符串或false。
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // 命名管道
        return val;
    }

    if (port >= 0) {
        // 端口号
        return port;
    }

    return false;
}

/**
 * HTTP服务器“错误”事件的事件侦听器。
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // 通过友好的消息处理特定的监听错误
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * HTTP服务器“监听”事件的事件侦听器。
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log("service run in http://localhost:" + port);
    debug('Listening on ' + bind);
}
